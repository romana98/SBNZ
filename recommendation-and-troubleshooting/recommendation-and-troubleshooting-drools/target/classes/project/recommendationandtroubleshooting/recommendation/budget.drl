package project.recommendationandtroubleshooting.recommendation;

import project.recommendationandtroubleshooting.model.recommendation.InputRequirements;
import project.recommendationandtroubleshooting.model.recommendation.Recommendations;
import project.recommendationandtroubleshooting.model.recommendation.Configuration;
import java.util.List;

rule "Budget"
        agenda-group "recommendation"
        salience (5)
    when
         $r: Recommendations(configurations.isEmpty())
         $i: InputRequirements($b: budget);
         $min: Long() from $b.getMinPrice();
         $max: Long() from $b.getMaxPrice();
         $configurations: List() from collect(Configuration(considered == true));
         $c: Configuration(price < $min || price > $max) from $configurations;
    then
        System.out.println("Rule: Budget");
        modify($c) { setConsidered(false) };
end


/*

rule "Budget"
	salience (10)
    when
        i: InputRecommendation($max: budget.getMaxPrice(), $min: budget.getMinPrice())
        $o: Output($recommendedConfigurations: recommendedConfigurations.)
        $configurations: List() from collect(Configuration(considered == true))
        $c: Configuration(price < $min || price > $max) from $configurations
    then
    	modify($c) { setConsidered(false) }
    	modify($o) { setBudget("done") }
end

rule "BudgetPass"
	salience (10)
    when
        $i: InputRecommendation($max: budget.getMaxPrice(), $min: budget.getMinPrice())
        $o: Output(recommendedConfigurations.isEmpty(), usage == null, characteristics == null, budget == null, type == null)
        $configurations: List() from collect(Configuration(considered == true))
        $c: Configuration(price >= $min && price <= $max) from $configurations
    then
    	modify($o) { setBudget("done") }
end
*/