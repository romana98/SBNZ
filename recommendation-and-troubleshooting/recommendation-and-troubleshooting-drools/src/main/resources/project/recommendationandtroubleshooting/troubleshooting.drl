package project.recommendationandtroubleshooting.troubleshooting;
import project.recommendationandtroubleshooting.model.troubleshooting.*;
import java.util.List;
import java.util.Map;
import java.util.Collections;

rule "Troubleshooting"
	    agenda-group "troubleshooting"
        salience($val)
    when
        $b: Bug($desc: descriptions, $solutions: solutions);
        $p: Problem($problems: problems, $triedSolutions: moveCurrentSolution(), solutionWorked == false);

        Number($val: intValue >= $desc.size()) from accumulate(
            Description($description: this) from $problems
            and Description(this == $description) from $desc,
            count($description)
        );

        $tuple:  Map.Entry( $key: key, $value: value ) from $solutions.entrySet() and
                 Solution(this != $value, $key == $triedSolutions.size()) from $triedSolutions;

        $s: Solution(this not memberOf $triedSolutions) from $solutions.get($tuple.key);

    then
        System.out.println("Rule: Troubleshooting");
        System.out.println("Solution:");
        System.out.println($s);
        modify($p){
            setCurrentSolution($s),
            setSolutionWorked(true)
        };
end
/*
rule "Troubleshooting - first request"
	    agenda-group "troubleshooting"
        salience($val - 0.1)
    when
        $b: Bug($desc: descriptions, $solutions: solutions);
        $p: Problem($problems: problems, $triedSolutions: moveCurrentSolution(), solutionWorked == false);

        Number($val: intValue >= $desc.size()) from accumulate(
            Description($description: this) from $problems
            and Description(this == $description) from $desc,
            count($description)
        );

        $tuple:  Map.Entry( key == 1) from $solutions.entrySet();


        $s: Solution(this not memberOf $triedSolutions) from $solutions.get($tuple.key);

    then
        System.out.println("Rule: Troubleshooting - first request");
        System.out.println("Solution:");
        System.out.println($s);
        modify($p){
            setCurrentSolution($s),
            setSolutionWorked(true)
        };
end
*/

