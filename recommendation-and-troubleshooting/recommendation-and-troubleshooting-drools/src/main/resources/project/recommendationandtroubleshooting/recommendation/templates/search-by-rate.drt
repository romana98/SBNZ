template header

minRate
maxRate

package project.recommendationandtroubleshooting.recommendation;
import project.recommendationandtroubleshooting.model.recommendation.Configurations;
import project.recommendationandtroubleshooting.model.recommendation.Configuration;
import project.recommendationandtroubleshooting.model.recommendation.ConfigurationUsageType;
import project.recommendationandtroubleshooting.model.recommendation.ConfigurationCharacteristicType;
import project.recommendationandtroubleshooting.model.recommendation.Budget;
import project.recommendationandtroubleshooting.model.recommendation.Mobility;
import project.recommendationandtroubleshooting.model.recommendation.Favorite;
import project.recommendationandtroubleshooting.model.recommendation.Rating;
import project.recommendationandtroubleshooting.enums.ConfigurationType
import project.recommendationandtroubleshooting.model.User;
import java.util.List;


template "interval-rating"


query getAverageRating(Long configurationId, double $average)
	$c: Configuration(id == configurationId, $ratings: ratings);
	$average:= Number() from accumulate (
		Rating($rate: rate) from $ratings,
		average($rate));
end;


rule "Get configurations rated between minRate and maxRate_@{row.rowNumber}" 
	agenda-group "search-by-rate"
when	
	$pc: Configurations();
	$c: Configuration($idConf: id);
	?getAverageRating($idConf, $average;)
	eval($average >= @{minRate} && $average <= @{maxRate})
then
    System.out.println("Average: " + $average);
    modify($pc){getConfigurations().add($c)};
    System.out.println($pc.getConfigurations());
    System.out.println($pc.getConfigurations().size());
end

end template

