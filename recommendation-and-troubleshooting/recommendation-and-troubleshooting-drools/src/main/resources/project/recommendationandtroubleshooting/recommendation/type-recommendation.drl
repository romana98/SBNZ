package project;

import project.recommendationandtroubleshooting.model.recommendation.Configuration;
import project.recommendationandtroubleshooting.model.recommendation.InputRecommendation;
import project.recommendationandtroubleshooting.model.recommendation.ConfigurationUsageType;
import project.recommendationandtroubleshooting.model.recommendation.ConfigurationCharacteristicType;
import project.recommendationandtroubleshooting.model.recommendation.Budget;
import project.recommendationandtroubleshooting.model.recommendation.Mobility;
import project.recommendationandtroubleshooting.model.recommendation.Output;
import project.recommendationandtroubleshooting.enums.ConfigurationType;
import java.util.List;

rule "Desktop" 
	agenda-group "type-recommendation"
	salience (9) 
    when
        $i: InputRecommendation(mobility.getMobility() < 50)
        $o: Output(recommendedConfigurations.isEmpty(), usage == null, characteristics == null, budget == "done", type == null)
        $configurations: List() from collect(Configuration(considered == true))
        $c: Configuration(type == ConfigurationType.LAPTOP) from $configurations
    then
    	modify($c) { setConsidered(false) }
    	modify($o) { setType("done") }
end

rule "Laptop" 
	agenda-group "type-recommendation"
	salience (9) 
    when
        $i: InputRecommendation(mobility.getMobility() >= 50)
        $o: Output(recommendedConfigurations.isEmpty(), usage == null, characteristics == null, budget == "done", type == null)
        $configurations: List() from collect(Configuration(considered == true))
        $c: Configuration(type == ConfigurationType.DESKTOP) from $configurations
    then
    	modify($c) { setConsidered(false) }
    	modify($o) { setType("done") }
end